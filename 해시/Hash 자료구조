## 해시함수
- **해시함수(hash function)**: 데이터의 효율적 관리를 목적으로 임의의 길이의 데이터를 고정된 길이의 데이터로 매핑하는 함수이다.
- **key**: 매핑 전 원래 데이터의 값
- **hash value**: 매핑 후 데이터의 값
- **hashing**: 매핑하는 과정 자체
- **hash collision**: 해시함수가 서로 다른 두 개의 키에 대해 동일한 해시값을 내는 것. 
해시함수는 해쉬값의 개수보다 대개 많은 키값을 해쉬값으로 변환(many-to one 대응)하기 때문에 발생.

## 해시테이블의 장점
- 적은 리소스로 많은 데이터를 효율적으로 관리할 수 있다.
- 색인(index)에 해시값을 사용함으로써 모든 데이터를 살피지 않아도 검색과 삽입/삭제를 빠르게 수행할 수 있다.
(계산복잡성 O(1))
- 보안 분야에서 사용
- 데이터 축약 기능 수행
- 중요한 것은 해시충돌이 해시값 전체에 걸쳐 균등하게 발생하게끔 하는 것.

## 해시테이블
- **hash table**: 해시함수를 사용하여 키를 해시값으로 매핑하고, 이 해시값을 색인(index) 혹은 주소 삼아
데이터의 값(value)을 키와 함께 저장하는 자료구조
- **bucket(slot)**: 데이터가 저장되는 곳
- **Direct-address table**: 키의 전체 개수와 동일한 크기의 버킷을 가진 해시테이블
(해시충돌 문제가 발생하지 않지만 메모리 효율성 떨어짐)
- 보통 해시테이블 크기(m)가 실제 사용하는 키 개수(n)보다 적은 해시테이블 운용
- **load factor(α)**: n/m (해시테이블의 한 버킷에 평균 몇 개의 키가 매핑되는가를 나타내는 지표)

## 해시충돌을 해결하기 위한 다양한 기법
- chaining
- open addressing

## 
[ratsgo's blog](https://ratsgo.github.io/data%20structure&algorithm/2017/10/25/hash/) 를 참고하여 작성